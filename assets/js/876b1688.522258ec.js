"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[148],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},k="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),k=p(a),f=r,m=k["".concat(l,".").concat(f)]||k[f]||u[f]||i;return a?n.createElement(m,o(o({ref:t},c),{},{components:a})):n.createElement(m,o({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[k]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}f.displayName="MDXCreateElement"},784:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>k,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:9},o="Spark Streaming \u96c6\u6210 Kafka",s={unversionedId:"spark/Spark Streaming \u96c6\u6210 Kafka",id:"spark/Spark Streaming \u96c6\u6210 Kafka",title:"Spark Streaming \u96c6\u6210 Kafka",description:"\u7248\u672c\u9009\u62e9",source:"@site/docs/spark/Spark Streaming \u96c6\u6210 Kafka.md",sourceDirName:"spark",slug:"/spark/Spark Streaming \u96c6\u6210 Kafka",permalink:"/docs/spark/Spark Streaming \u96c6\u6210 Kafka",draft:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"defaultSidebar",previous:{title:"Spark Streaming \u5165\u95e8\u6307\u5357",permalink:"/docs/spark/Spark Streaming \u5165\u95e8\u6307\u5357"},next:{title:"Flink",permalink:"/docs/flink/"}},l={},p=[{value:"\u7248\u672c\u9009\u62e9",id:"\u7248\u672c\u9009\u62e9",level:2},{value:"\u4ee3\u7801\u793a\u4f8b",id:"\u4ee3\u7801\u793a\u4f8b",level:2},{value:"\u6d88\u8d39\u539f\u7406",id:"\u6d88\u8d39\u539f\u7406",level:2},{value:"\u6d88\u8d39\u8005\u5206\u914d",id:"\u6d88\u8d39\u8005\u5206\u914d",level:3},{value:"\u4f4d\u79fb\u533a\u95f4\u5206\u914d",id:"\u4f4d\u79fb\u533a\u95f4\u5206\u914d",level:3},{value:"\u6570\u636e\u6d88\u8d39",id:"\u6570\u636e\u6d88\u8d39",level:3},{value:"\u4f4d\u79fb\u63d0\u4ea4",id:"\u4f4d\u79fb\u63d0\u4ea4",level:3},{value:"\u8ba2\u9605\u7b56\u7565",id:"\u8ba2\u9605\u7b56\u7565",level:3},{value:"\u9884\u53d6\u673a\u5236",id:"\u9884\u53d6\u673a\u5236",level:2},{value:"\u6d88\u8d39\u7f13\u5b58",id:"\u6d88\u8d39\u7f13\u5b58",level:3},{value:"\u8c03\u5ea6\u504f\u597d",id:"\u8c03\u5ea6\u504f\u597d",level:3},{value:"\u4f4d\u79fb\u5b58\u50a8",id:"\u4f4d\u79fb\u5b58\u50a8",level:2},{value:"Kafka",id:"kafka",level:3},{value:"Checkpoint",id:"checkpoint",level:3},{value:"\u6570\u636e\u5e93",id:"\u6570\u636e\u5e93",level:3}],c={toc:p};function k(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"spark-streaming-\u96c6\u6210-kafka"},"Spark Streaming \u96c6\u6210 Kafka"),(0,r.kt)("h2",{id:"\u7248\u672c\u9009\u62e9"},"\u7248\u672c\u9009\u62e9"),(0,r.kt)("p",null,"Spark Streaming \u81ea\u5e26 Kafka \u96c6\u6210\uff0c\u4e14 RDD \u5206\u533a\u4e0e Kafka \u5206\u533a\u652f\u6301 1:1 \u7684\u5bf9\u7167\u5173\u7cfb\u3002"),(0,r.kt)("p",null,"\u76ee\u524d\u6709 ",(0,r.kt)("inlineCode",{parentName:"p"},"0.8")," \u548c ",(0,r.kt)("inlineCode",{parentName:"p"},"0.10")," \u4e24\u79cd\u7248\u672c\u7684\u96c6\u6210\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u9664\u4e86\u4f7f\u7528\u65b9\u5f0f\u6709\u6240\u4e0d\u540c\uff0c\u4e24\u8005\u5728\u4ee5\u4e0b\u65b9\u9762\u4e5f\u5b58\u5728\u660e\u663e\u5dee\u5f02\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5e95\u5c42 API\uff1a",(0,r.kt)("inlineCode",{parentName:"li"},"0.8")," \u57fa\u4e8e SimpleConsumer \u5b9e\u73b0\uff0c\u4e0d\u652f\u6301\u53c2\u6570\u8c03\u4f18\uff0c",(0,r.kt)("inlineCode",{parentName:"li"},"0.10")," \u57fa\u4e8e Consumer API \u5b9e\u73b0\uff0c",(0,r.kt)("strong",{parentName:"li"},"\u652f\u6301\u53c2\u6570\u8c03\u4f18")),(0,r.kt)("li",{parentName:"ul"},"\u9884\u53d6\u673a\u5236\uff1a",(0,r.kt)("inlineCode",{parentName:"li"},"0.8")," \u7248\u672c\u4e0d\u652f\u6301\u9884\u53d6\u673a\u5236\uff0c\u6027\u80fd\u8f83\u5dee\uff0c",(0,r.kt)("inlineCode",{parentName:"li"},"0.10")," \u7248\u672c\u652f\u6301\u9884\u53d6\u673a\u5236\uff0c",(0,r.kt)("strong",{parentName:"li"},"\u6027\u80fd\u8f83\u597d"))),(0,r.kt)("p",null,"\u7efc\u4e0a\uff0c\u5728\u6761\u4ef6\u5141\u8bb8\u7684\u60c5\u51b5\u4e0b\uff0c\u5efa\u8bae\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"0.10")," \u7248\u672c\uff0c\u5176 Maven \u4f9d\u8d56\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>org.apache.spark</groupId>\n    <artifactId>spark-streaming-kafka-0-10_${scala.version}</artifactId>\n    <version>${spark.version}</version>\n</dependency>\n")),(0,r.kt)("h2",{id:"\u4ee3\u7801\u793a\u4f8b"},"\u4ee3\u7801\u793a\u4f8b"),(0,r.kt)("p",null,"Spark Streaming \u96c6\u6210 Kafka \u662f\u57fa\u4e8e DirectKafkaInputDStream \u548c KafkaRDD \u5b9e\u73b0\u7684\uff0c\u5176\u7f16\u7801\u6b65\u9aa4\u5927\u81f4\u4e3a\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u521b\u5efa SparkConf \u4e0e StreamingContext\uff0c\u8bbe\u7f6e\u6279\u6b21\u65f6\u95f4"),(0,r.kt)("li",{parentName:"ol"},"\u8bbe\u7f6e Kafka Consumer \u6d88\u8d39\u914d\u7f6e\uff0c\u6307\u5b9a broker \u5730\u5740\u3001\u6d88\u8d39\u8005\u7ec4\u540d\u7b49"),(0,r.kt)("li",{parentName:"ol"},"\u521b\u5efa DirectKafkaInputDStream\uff0c\u8bbe\u7f6e ",(0,r.kt)("strong",{parentName:"li"},"\u8c03\u5ea6\u504f\u597d"),"\u3001",(0,r.kt)("strong",{parentName:"li"},"\u8ba2\u9605\u7b56\u7565")," \u4e0e ",(0,r.kt)("strong",{parentName:"li"},"\u8ba2\u9605topic")),(0,r.kt)("li",{parentName:"ol"},"\u5b9a\u4e49\u8f6c\u6362\u7b97\u5b50\u4e0e\u8f93\u51fa\u7b97\u5b50\uff0c\u5e76\u5b8c\u6210 ",(0,r.kt)("strong",{parentName:"li"},"\u4f4d\u79fb\u63d0\u4ea4")),(0,r.kt)("li",{parentName:"ol"},"\u542f\u52a8 StreamingContext \u5e76\u963b\u585e Driver \u8fdb\u7a0b")),(0,r.kt)("p",null,"\u4ee5\u4e0b\u4e3a\u793a\u4f8b\u4ee3\u7801\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'object KafkaStream {\n\n  def main(args: Array[String]): Unit = {\n    val conf: SparkConf = new SparkConf().setMaster("local[3]").setAppName("Kafka Streaming App")\n    val ssc: StreamingContext = new StreamingContext(conf, Seconds(10))\n\n    val map: util.HashMap[String, Object] = new util.HashMap[String, Object]()\n    // \u8bbe\u7f6e broker \u5730\u5740\n    map.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "xxx:9092")\n    // \u8bbe\u7f6e\u6d88\u8d39\u8005\u7ec4\u540d\n    map.put(ConsumerConfig.GROUP_ID_CONFIG, "test")\n    // \u4e0d\u81ea\u52a8\u63d0\u4ea4\u4f4d\u79fb\n    map.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, false: java.lang.Boolean)\n    // \u4f4d\u79fb\u521d\u59cb\u4f4d\u7f6e\u7b56\u7565\n    map.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest")\n    map.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, classOf[StringDeserializer])\n    map.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, classOf[StringDeserializer])\n    map.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, 300000: java.lang.Integer)\n    map.put(ConsumerConfig.REQUEST_TIMEOUT_MS_CONFIG, 360000: java.lang.Integer)\n    map.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, 250: java.lang.Integer)\n\n    // \u8bbe\u7f6e\u6d88\u8d39 topic\n    val topics: Array[String] = Array("test")\n    // \u8bbe\u7f6e\u8c03\u5ea6\u504f\u597d\u3001\u8ba2\u9605\u7b56\u7565\n    val stream: InputDStream[ConsumerRecord[String, String]] =\n      KafkaUtils.createDirectStream(ssc, PreferConsistent, Subscribe[String, String](topics, map.asScala))\n\n    stream.foreachRDD((rdd, time) => {\n      // \u83b7\u53d6\u5f53\u524d RDD \u5bf9\u5e94\u7684\u4f4d\u79fb\u4fe1\u606f\n      val currentOffsets: Array[OffsetRange] = rdd.asInstanceOf[HasOffsetRanges].offsetRanges\n\n      rdd.foreachPartition(iterator => {\n        while (iterator.hasNext) {\n          val value: String = iterator.next().value()\n          println(value)\n        }\n      })\n\n      // \u624b\u52a8\u63d0\u4ea4\u4f4d\u79fb\n      stream.asInstanceOf[CanCommitOffsets].commitAsync(currentOffsets)\n    })\n\n    ssc.start()\n    ssc.awaitTermination()\n  }\n}\n')),(0,r.kt)("h2",{id:"\u6d88\u8d39\u539f\u7406"},"\u6d88\u8d39\u539f\u7406"),(0,r.kt)("p",null,"\u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0cSpark Streaming \u96c6\u6210 Kafka \u4e0e Kafka Consumer API \u5728\u7f16\u7801\u5f62\u5f0f\u4e0a\u6709\u5f88\u5927\u7684\u4e0d\u540c\u3002\u4e3a\u4e86\u63a2\u7a76\u8fd9\u79cd\u4e0d\u540c\u4ea7\u751f\u7684\u539f\u56e0\uff0c\u6211\u4eec\u9700\u8981\u6df1\u5165\u5230 DirectKafkaInputDStream \u548c KafkaRDD \u7684\u6e90\u7801\uff0c\u53bb\u4e86\u89e3\u5185\u90e8\u7684\u6d88\u8d39\u539f\u7406\u3002"),(0,r.kt)("h3",{id:"\u6d88\u8d39\u8005\u5206\u914d"},"\u6d88\u8d39\u8005\u5206\u914d"),(0,r.kt)("p",null,"\u56de\u987e\u4e00\u4e0b\u57fa\u4e8e Kafka Consumer API \u5f00\u53d1\u6d88\u8d39\u8005\u7a0b\u5e8f\u7684\u573a\u666f\u3002\u5728\u8d44\u6e90\u8db3\u591f\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u5e38\u6211\u4eec\u4f1a\u4e3a\u6bcf\u4e2a Kafka \u5206\u533a\u5f00\u542f\u4e00\u4e2a\u6d88\u8d39\u8005\u5b9e\u4f8b\uff0c\u4ee5\u8fbe\u5230\u6700\u4f73\u6d88\u8d39\u6027\u80fd\u3002"),(0,r.kt)("p",null,"\u5728 KafkaRDD \u4e2d\uff0c\u540c\u6837\u652f\u6301 Kafka \u5206\u533a\u4e0e\u6d88\u8d39\u8005\u5b9e\u4f8b 1:1 \u7684\u5bf9\u7167\u5173\u7cfb\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(3437).Z,width:"890",height:"346"})),(0,r.kt)("p",null,"\u4e3a\u5b9e\u73b0\u8fd9\u79cd 1:1 \u7684\u5173\u7cfb\uff0cKafkaRDD \u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"compute")," \u65b9\u6cd5\u4f1a\u4e3a\u6bcf\u4e2a\u5206\u533a\u8fd4\u56de\u4e00\u4e2a KafkaRDDIterator\u3002KafkaRDDIterator \u662f\u4e00\u4e2a\u8fd0\u884c\u5728 Executor \u8282\u70b9\u7684\u8fed\u4ee3\u5668\uff0c\u5b83\u5185\u90e8\u4f1a ",(0,r.kt)("strong",{parentName:"p"},"\u4e3a\u6bcf\u4e00\u4e2a topic \u5206\u533a\u5355\u72ec\u521b\u5efa\u4e00\u4e2a Executor \u7aef Kafka \u6d88\u8d39\u8005"),"\uff0c\u4ee5\u4fbf\u4ece Kafka \u76f4\u63a5\u62c9\u53d6\u6570\u636e\uff0c\u5982\u4ee3\u7801\u6240\u793a\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'// KafkaRDDIterator\nval consumer = {\n  KafkaDataConsumer.init(cacheInitialCapacity, cacheMaxCapacity, cacheLoadFactor)\n  KafkaDataConsumer.acquire[K, V](part.topicPartition(), kafkaParams, context, useConsumerCache)\n}\n\n// KafkaDataConsumer \u4f1a\u901a\u8fc7 InternalKafkaConsumer \u7684 createConsumer \u521b\u5efa Executor \u7aef\u6d88\u8d39\u8005\nprivate def createConsumer: KafkaConsumer[K, V] = {\n  val updatedKafkaParams = KafkaConfigUpdater("executor", kafkaParams.asScala.toMap)\n    .setAuthenticationConfigIfNeeded()\n    .build()\n  val c = new KafkaConsumer[K, V](updatedKafkaParams)\n  val topics = ju.Arrays.asList(topicPartition)\n  // \u4f7f\u7528 assign \u8ba2\u9605\n  c.assign(topics)\n  c\n}\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"\u5f53 RDD \u5206\u533a\u3001Kafka \u5206\u533a\u548c Executor \u6838\u5fc3\u6570\u8fbe\u5230 1:1:1 \u65f6\uff0c\u541e\u5410\u91cf\u6700\u5927\u3002\u5982\u679c Executor \u6838\u5fc3\u6570\u5c0f\u4e8e Kafka \u5206\u533a\uff0c\u90a3\u4e48\u4f1a\u51fa\u73b0 Executor \u8d1f\u8f7d\u4e0d\u5747\u548c\u6d88\u8d39\u6392\u961f\u7684\u60c5\u51b5\u3002")),(0,r.kt)("h3",{id:"\u4f4d\u79fb\u533a\u95f4\u5206\u914d"},"\u4f4d\u79fb\u533a\u95f4\u5206\u914d"),(0,r.kt)("p",null,"\u5728 Spark Streaming \u4e2d\uff0c\u6bcf\u4e2a RDD \u5bf9\u5e94\u4e00\u4e2a\u6279\u6b21\u8303\u56f4\u5185\u7684\u6570\u636e\uff0c\u5373\u6570\u636e\u6d41\u4e2d\u7684\u4e00\u6bb5\u6570\u636e\u3002\u5728 KafkaRDD \u4e2d\uff0c\u7531\u4e8e RDD \u5206\u533a\u4e0e Kafka \u5206\u533a\u662f 1:1 \u5173\u7cfb\uff0c\u4e0a\u8ff0\u5bf9\u5e94\u5173\u7cfb\u4fbf\u8868\u73b0\u4e3a KafkaRDD \u5206\u533a\u5bf9\u5e94 topic \u5206\u533a\u4e2d\u7684\u67d0\u4e00\u6bb5\u6570\u636e\u3002\u90a3\u4e48\uff0c\u5f15\u7533\u51fa\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0cKafkaRDD \u662f\u600e\u4e48\u77e5\u9053\u6bcf\u4e2a\u5206\u533a\u5e94\u8be5\u6d88\u8d39\u591a\u5c11\u6570\u636e\uff1f\u8fd9\u91cc\u5c31\u6d89\u53ca\u5230\u4f4d\u79fb\u533a\u95f4\u5206\u914d\u7684\u95ee\u9898\u3002"),(0,r.kt)("p",null,"\u5b9e\u9645\u4e0a\uff0c\u5728 Driver \u7aef\u4e5f\u5b58\u5728\u4e00\u4e2a Kafka \u6d88\u8d39\u8005\uff0c\u8fd9\u4e2a\u6d88\u8d39\u8005\u4e0d\u6d88\u8d39\u6570\u636e\uff0c\u53ea\u8d1f\u8d23\u6d88\u8d39\u4f4d\u79fb\u533a\u95f4\u7684\u5206\u914d\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(5667).Z,width:"907",height:"516"})),(0,r.kt)("p",null,"DirectKafkaInputDStream \u542f\u52a8\u65f6\u4f1a\u901a\u8fc7 ConsumerStrategy \u521b\u5efa\u4e00\u4e2a Kafka \u6d88\u8d39\u8005\u3002\u5982\u679c\u6211\u4eec\u5728\u521b\u5efa DStream \u65f6\u4fbf\u4f20\u5165\u4f4d\u79fb\u533a\u95f4\u4fe1\u606f\uff0c\u90a3\u4e48\u8be5\u6d88\u8d39\u8005\u4f1a\u901a\u8fc7\u8be5\u533a\u95f4\u4fe1\u606f\u786e\u5b9a\u5176\u4f4d\u79fb\u533a\u95f4\u8d77\u59cb\u70b9\uff1b\u5982\u679c\u6211\u4eec\u6ca1\u6709\u6307\u5b9a\u4efb\u4f55\u4f4d\u79fb\u533a\u95f4\u4fe1\u606f\uff0c\u90a3\u4e48\u8be5\u6d88\u8d39\u8005\u4f1a\u6839\u636e ",(0,r.kt)("inlineCode",{parentName:"p"},"auto.offset.reset")," \u51b3\u5b9a\u4f4d\u79fb\u533a\u95f4\u8d77\u59cb\u70b9\u3002\u76f8\u5173\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"override def start(): Unit = {\n  val c = consumer\n  paranoidPoll(c)\n  if (currentOffsets.isEmpty) {\n    currentOffsets = c.assignment().asScala.map { tp =>\n      // \u5982\u679c\u672a\u8c03\u7528 seek\uff0cposition \u65b9\u6cd5\u57fa\u4e8e auto.offset.reset \u786e\u5b9a\u5206\u533a\u4f4d\u79fb\n      tp -> c.position(tp)\n    }.toMap\n  }\n}\n\ndef consumer(): Consumer[K, V] = this.synchronized {\n  if (null == kc) {\n    // \u7528\u6237\u4f20\u9012\u7684 offsetRanges \u4fe1\u606f\u4f1a\u4f20\u9012\u7ed9 ConsumerStrategy\uff0c\u7531 ConsumerStrategy \u5b8c\u6210\u4f4d\u79fb seek\n    kc = consumerStrategy.onStart(\n      currentOffsets.mapValues(l => java.lang.Long.valueOf(l)).toMap.asJava)\n  }\n  kc\n}\n")),(0,r.kt)("p",null,"\u6211\u4eec\u77e5\u9053\uff0cDirectKafkaInputDStream \u4f1a\u5468\u671f\u6027\u5730\u521b\u5efa KafkaRDD\uff0c\u4f4d\u79fb\u533a\u95f4\u7ed3\u675f\u70b9\u5c31\u662f\u5728\u8fd9\u4e2a\u65f6\u5019\u786e\u5b9a\u7684\u3002\u5728\u751f\u6210 RDD \u524d\uff0c\u6d88\u8d39\u8005\u4f1a\u901a\u8fc7 ",(0,r.kt)("inlineCode",{parentName:"p"},"seekToEnd")," \u65b9\u6cd5\u786e\u5b9a topic \u7684\u6700\u65b0\u4f4d\u79fb\uff0c\u4ee5\u6b64\u4f5c\u4e3a\u4f4d\u79fb\u533a\u95f4\u7ed3\u675f\u70b9\u3002\u76f8\u5173\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"override def compute(validTime: Time): Option[KafkaRDD[K, V]] = {\n  val untilOffsets = clamp(latestOffsets())\n  val offsetRanges = untilOffsets.map { case (tp, uo) =>\n    val fo = currentOffsets(tp)\n    OffsetRange(tp.topic, tp.partition, fo, uo)\n  }\n  val useConsumerCache = context.conf.get(CONSUMER_CACHE_ENABLED)\n  val rdd = new KafkaRDD[K, V](context.sparkContext, executorKafkaParams, offsetRanges.toArray,\n    getPreferredHosts, useConsumerCache)\n  // ...\n}\n")),(0,r.kt)("p",null,"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4f4d\u79fb\u533a\u95f4\u7ed3\u675f\u70b9\u5e76\u4e0d\u603b\u662f topic \u5404\u533a\u95f4\u7684\u6700\u65b0\u4f4d\u79fb\uff0c\u8fd8\u9700\u8981\u8003\u8651\u4e24\u79cd\u573a\u666f\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5982\u679c\u7528\u6237\u8bbe\u7f6e\u4e86 ",(0,r.kt)("inlineCode",{parentName:"li"},"spark.streaming.kafka.maxRatePerPartition")," \u53c2\u6570\uff0c\u90a3\u4e48 DirectKafkaInputDStream \u4f1a\u53d6",(0,r.kt)("strong",{parentName:"li"},"\u5f53\u524d\u4f4d\u79fb\u52a0\u4e0a maxRatePerPartition")," \u4e0e ",(0,r.kt)("strong",{parentName:"li"},"\u6700\u65b0\u4f4d\u79fb")," \u95f4\u7684\u6700\u5927\u503c"),(0,r.kt)("li",{parentName:"ul"},"\u5982\u679c\u6d88\u8d39\u5ef6\u8fdf\u8fbe\u5230\u4e00\u5b9a\u9608\u503c\u89e6\u53d1\u4e86\u80cc\u538b\uff0c\u8fd8\u4f1a\u4f18\u5148\u4ee5\u80cc\u538b\u6bd4\u7387\u4e3a\u53c2\u8003\u786e\u5b9a\u4f4d\u79fb\u533a\u95f4\u7ed3\u675f\u70b9")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"\u914d\u7f6e\u9879 ",(0,r.kt)("inlineCode",{parentName:"p"},"spark.streaming.kafka.maxRatePerPartition")," \u901a\u5e38\u7528\u4e8e\u9650\u5236 ",(0,r.kt)("strong",{parentName:"p"},"\u6bcf\u4e2a\u5206\u533a\u6bcf\u79d2\u949f")," \u7684\u6d88\u8d39\u91cf\uff0c\u907f\u514d\u4e0a\u6e38\u7a81\u53d1\u9ad8\u5cf0\u65f6 Spark \u96c6\u7fa4\u56e0\u4e0d\u582a\u91cd\u8d1f\u800c\u51fa\u73b0\u5f02\u5e38\u3002")),(0,r.kt)("h3",{id:"\u6570\u636e\u6d88\u8d39"},"\u6570\u636e\u6d88\u8d39"),(0,r.kt)("p",null,"\u4f7f\u7528 Kafka Consumer API \u65f6\uff0c\u6211\u4eec\u4e00\u822c\u4f1a\u901a\u8fc7\u5faa\u73af\u8c03\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"poll")," \u65b9\u6cd5\u6765\u6301\u7eed\u6d88\u8d39\u6570\u636e\uff0c\u5982\u4e0b\u6240\u793a\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"while (true) {\n    ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(1000));\n    for (ConsumerRecord<String, String> record : records) {\n        String message = record.value();\n        // do something\n    }\n    consumer.commitSync();\n}\n")),(0,r.kt)("p",null,"\u5728 Spark Streaming \u4e2d\uff0c\u6211\u4eec\u4e5f\u662f\u901a\u8fc7\u5faa\u73af\u7684\u65b9\u5f0f\u6301\u7eed\u6d88\u8d39\u6570\u636e\uff0c\u8fd9\u4e2a\u6d88\u8d39\u884c\u4e3a\u7684\u89e6\u53d1\u5165\u53e3\u5728\u6211\u4eec\u5b9a\u4e49\u7684\u7528\u6237\u51fd\u6570\u91cc\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"stream.foreachRDD((rdd, time) => {\n  rdd.foreachPartition(iterator => {\n    while (iterator.hasNext) {\n      val value: String = iterator.next().value()\n      // do something\n    }\n  })\n  // \u63d0\u4ea4\u4f4d\u79fb\n})\n")),(0,r.kt)("p",null,"\u5728\u7528\u6237\u51fd\u6570\u4e2d\uff0c\u4f1a\u4e0d\u65ad\u8c03\u7528\u8fed\u4ee3\u5668 iterator \u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"hasNext")," \u65b9\u6cd5\uff0c\u83b7\u53d6\u4e0b\u4e00\u6761\u6570\u636e\u3002\u8fd9\u4e2a\u8fed\u4ee3\u5668\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u7531 KafkaRDD \u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"compute")," \u65b9\u6cd5\u521b\u5efa\u51fa\u6765\u7684 KafkaRDDIterator\u3002\u9664\u4e86\u4e0a\u6587\u63d0\u5230\u7684\u6d88\u8d39\u8005\u521b\u5efa\uff0cKafkaRDDIterator \u8fd8\u4f1a\u4ece KafkaRDD \u83b7\u53d6\u5206\u914d\u5230\u7684\u4f4d\u79fb\u533a\u95f4\uff0c\u56e0\u6b64\u5b83\u5177\u5907\u4e86\u6570\u636e\u6d88\u8d39\u7684\u57fa\u672c\u6761\u4ef6\u3002\u6211\u4eec\u6765\u770b\u770b\u5b83\u7684\u6838\u5fc3\u4ee3\u7801\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'// \u83b7\u53d6\u4f4d\u79fb\u533a\u95f4\u8d77\u59cb\u70b9\nvar requestOffset = part.fromOffset\n\noverride def hasNext: Boolean = requestOffset < part.untilOffset\n\noverride def next(): ConsumerRecord[K, V] = {\n  if (!hasNext) {\n    throw new ju.NoSuchElementException("Can\'t call getNext() once untilOffset has been reached")\n  }\n  val r = consumer.get(requestOffset, pollTimeout)\n  // \u6d88\u8d39\u8fdb\u5ea6 +1\n  requestOffset += 1\n  r\n}\n')),(0,r.kt)("p",null,"\u53ef\u89c1\uff0c\u6570\u636e\u6d88\u8d39\u662f\u53d1\u751f\u5728 KafkaRDDIterator \u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"next")," \u65b9\u6cd5\u4e2d\u7684\uff0c\u5176\u4e2d\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"consumer")," \u662f InternalKafkaConsumer \uff0c\u5b83\u5bf9\u539f\u751f\u7684 KafkaConsumer \u505a\u4e86\u5c01\u88c5\uff0c\u5176 ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," \u65b9\u6cd5\u4f1a\u901a\u8fc7\u539f\u751f\u7684 KafkaConsumer \u62c9\u53d6\u6570\u636e\uff0c\u7136\u540e\u5c06\u6570\u636e\u5b58\u50a8\u5230\u7f13\u5b58\u961f\u5217 ",(0,r.kt)("inlineCode",{parentName:"p"},"buffer")," \u4e2d\uff0c\u5982\u4ee3\u7801\u6240\u793a\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"def get(offset: Long, timeout: Long): ConsumerRecord[K, V] = {\n  // \u53ea\u5728\u7b2c\u4e00\u6b21\u62c9\u53d6\u65f6\u89e6\u53d1\uff0cnextOffset \u7684\u521d\u59cb\u503c\u4e3a -2\n  if (offset != nextOffset) {\n    seek(offset)\n    poll(timeout)\n  }\n\n  // \u7f13\u5b58\u4e3a\u7a7a\uff0c\u7ee7\u7eed\u62c9\u53d6\uff0c\u7136\u540e\u6dfb\u52a0\u6570\u636e\u5230\u7f13\u5b58\n  if (!buffer.hasNext()) {\n    poll(timeout)\n  }\n  \n  // \u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u6570\u636e\n  var record = buffer.next()\n\n  if (record.offset != offset) {\n    // \u5904\u7406\u5f02\u5e38\n  }\n\n  // \u6d88\u8d39\u8fdb\u5ea6 +1\uff0c\u4e0e KafkaRDDIterator \u7684 requestOffset \u4fdd\u6301\u4e00\u81f4\n  nextOffset = offset + 1\n  record\n}\n\nprivate def poll(timeout: Long): Unit = {\n  // \u4f9d\u8d56\u539f\u751f KafkaConsumer \u62c9\u53d6\u6570\u636e\n  val p = consumer.poll(Duration.ofMillis(timeout))\n  val r = p.records(topicPartition)\n  // \u5c06\u62c9\u53d6\u5230\u7684\u6570\u636e\u653e\u5165\u7f13\u5b58\n  buffer = r.listIterator\n}\n")),(0,r.kt)("p",null,"\u770b\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u7591\u95ee\uff1a\u6d88\u8d39\u884c\u4e3a\u662f\u5728\u5916\u90e8\u7684\u7528\u6237\u51fd\u6570\u89e6\u53d1\u7684\uff0c\u5374\u4f5c\u7528\u5230 Spark Streaming \u5185\u90e8\u7684\u6d88\u8d39\u8005\u5b9e\u4f8b\uff0c\u8fd9\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff1f\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5b9a\u4e49\u7684\u7528\u6237\u51fd\u6570 ",(0,r.kt)("inlineCode",{parentName:"p"},"func"),"\uff0c\u4f1a\u88ab\u5c01\u88c5\u5230 RDD \u4e2d\uff0c\u4f20\u9012\u7ed9 ResultTask\uff0c\u6700\u540e\u7531\u5b83\u8c03\u7528\u7528\u6237\u51fd\u6570\u53bb\u64cd\u4f5c KafkaRDD \u8fd4\u56de\u7684 iterator \u5bf9\u8c61\u3002\u5177\u4f53\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"override def runTask(context: TaskContext): U = {\n  // ...\n  func(context, rdd.iterator(partition, context))\n}\n")),(0,r.kt)("h3",{id:"\u4f4d\u79fb\u63d0\u4ea4"},"\u4f4d\u79fb\u63d0\u4ea4"),(0,r.kt)("p",null,"\u5728 Spark Streaming \u4e2d\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u4f4d\u79fb\u63d0\u4ea4\u662f\u53d1\u751f\u5728 Driver \u7aef\u7684\uff0cExecutor \u7aef\u7684\u6d88\u8d39\u8005\u53ea\u8d1f\u8d23\u6d88\u8d39\uff0c\u4e0d\u53c2\u4e0e\u4efb\u4f55\u4f4d\u79fb\u7ba1\u7406\u3002\u4e3a\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u7684\uff0cDirectKafkaInputDStream \u5bf9\u4f20\u9012\u7ed9 Executor \u7aef\u7684\u6d88\u8d39\u8005\u914d\u7f6e\u8fdb\u884c\u4e86\u8986\u5199\uff0c\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b 3 \u9879\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"enable.auto.commit"),"\uff1a\u8986\u5199\u4e3a ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),"\uff0c\u7981\u6b62 Executor \u7aef\u6d88\u8d39\u8005\u81ea\u52a8\u63d0\u4ea4\u4f4d\u79fb"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"auto.offset.reset"),"\uff1a\u8986\u5199\u4e3a ",(0,r.kt)("inlineCode",{parentName:"li"},"none"),"\uff0c\u4f7f\u7528 Driver \u7aef\u5206\u914d\u7684\u4f4d\u79fb\u533a\u95f4\u4f5c\u4e3a\u6d88\u8d39\u8303\u56f4"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"group.id"),"\uff1a\u4fee\u6539\u4e3a ",(0,r.kt)("inlineCode",{parentName:"li"},"spark-executor-${originalGroupId}"),"\uff0c\u4e0e Driver \u7aef\u6d88\u8d39\u8005\u533a\u5206\u5f00")),(0,r.kt)("h3",{id:"\u8ba2\u9605\u7b56\u7565"},"\u8ba2\u9605\u7b56\u7565"),(0,r.kt)("p",null,"\u5728\u521b\u5efa DirectKafkaInputDStream \u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u6307\u5b9a\u8ba2\u9605\u7b56\u7565 ConsumerStrategy\uff0c\u5b83\u6709 3 \u79cd\u5b9e\u73b0\u7c7b\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Subscribe\uff1a\u901a\u8fc7 ",(0,r.kt)("inlineCode",{parentName:"li"},"subscribe")," \u65b9\u6cd5\u8ba2\u9605\u4e00\u4e2a\u6307\u5b9a\u7684 ",(0,r.kt)("strong",{parentName:"li"},"topic \u96c6\u5408")),(0,r.kt)("li",{parentName:"ul"},"SubscribePattern\uff1a\u540c Subscribe\uff0c\u4f46\u652f\u6301\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d topic \u96c6\u5408"),(0,r.kt)("li",{parentName:"ul"},"Assign\uff1a\u901a\u8fc7 ",(0,r.kt)("inlineCode",{parentName:"li"},"assign")," \u65b9\u6cd5\u8ba2\u9605\u4e00\u4e2a\u56fa\u5b9a\u7684 ",(0,r.kt)("strong",{parentName:"li"},"topic \u5206\u533a\u96c6\u5408"))),(0,r.kt)("p",null,"\u7f16\u7801\u65f6\uff0c\u57fa\u4e8e Subscribe \u6216 SubscribePattern \u521b\u5efa DirectKafkaInputDStream \u4f1a\u6bd4\u8f83\u7b80\u5355\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val topics: Array[String] = Array("test")\nval stream: InputDStream[ConsumerRecord[String, String]] =\n  KafkaUtils.createDirectStream(ssc, PreferConsistent, Subscribe[String, String](topics, map.asScala))\n')),(0,r.kt)("p",null,"\u5982\u679c\u57fa\u4e8e Assign \u521b\u5efa DirectKafkaInputDStream\uff0c\u8fd8\u9700\u8981\u6307\u5b9a TopicPartition \u96c6\u5408\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val partitions: ListBuffer[TopicPartition] = ListBuffer[TopicPartition]()\nfor (i <- 0 to 3) {\n  partitions += new TopicPartition("test", i)\n}\nval stream: InputDStream[ConsumerRecord[String, String]] =\n  KafkaUtils.createDirectStream(ssc, PreferConsistent, Assign[String, String](partitions, map.asScala))\n')),(0,r.kt)("p",null,"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e9b\u8ba2\u9605\u7b56\u7565 ",(0,r.kt)("strong",{parentName:"p"},"\u6700\u4e3b\u8981\u7684\u4e0d\u540c")," \u4e0d\u5728\u4e8e\u4f7f\u7528\u65b9\u5f0f\u7684\u533a\u522b\uff0c\u800c\u5728\u4e8e ",(0,r.kt)("inlineCode",{parentName:"p"},"subcribe")," \u548c ",(0,r.kt)("inlineCode",{parentName:"p"},"assign")," \u7684\u533a\u522b\u3002\u5728 Kafka Consumer API \u4e2d\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"assign")," \u65b9\u6cd5\u53ea\u4f1a\u8ba2\u9605\u4e00\u4e2a\u56fa\u5b9a\u7684 TopicPartition \u96c6\u5408\uff0c\u81f3\u4e8e topic \u662f\u5426\u6709\u65b0\u589e\u5206\u533a\uff0c\u5b83\u4e0d\u5173\u6ce8\uff1b\u76f8\u53cd\u5730\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"subcribe")," \u65b9\u6cd5\u8ba2\u9605\u7684\u662f\u4e00\u4e2a topic \u96c6\u5408\uff0c\u5982\u679c\u5176\u4e2d\u7684 topic \u51fa\u73b0\u5206\u533a\u6570\u53d8\u5316\uff0c\u90a3\u4e48\u6d88\u8d39\u8005\u5b9e\u4f8b\u4fbf\u4f1a\u6536\u5230\u901a\u77e5\u3002"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"\u8ba2\u9605\u7b56\u7565\u53ea\u5bf9 Driver \u7aef\u6d88\u8d39\u8005\u751f\u6548\uff0cExecutor \u7aef\u7684\u6d88\u8d39\u8005\u662f\u5206\u533a\u7ea7\u522b\u7684\uff0c\u4f7f\u7528\u7684\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"assign")," \u65b9\u6cd5\u3002")),(0,r.kt)("p",null,"\u501f\u52a9\u4e8e ",(0,r.kt)("inlineCode",{parentName:"p"},"subcribe")," \u7684\u7279\u6027\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"0.10")," \u7248\u672c\u7684 Kafka \u96c6\u6210\u652f\u6301\u4e86 ",(0,r.kt)("strong",{parentName:"p"},"\u91cd\u5747\u8861")," \u7684\u529f\u80fd\u3002DirectKafkaInputDStream \u5728\u5206\u914d\u4f4d\u79fb\u533a\u95f4\u524d\uff0c\u4f1a\u5148\u5224\u65ad\u662f\u5426\u6709\u65b0\u5206\u533a\uff0c\u5982\u679c\u6709\uff0c\u5c06\u6dfb\u52a0\u65b0\u5206\u533a\u7684\u4f4d\u79fb\u4fe1\u606f\u5230\u5f53\u524d\u4f4d\u79fb\u533a\u95f4\u540e\u518d\u884c\u5206\u914d\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"protected def latestOffsets(): Map[TopicPartition, Long] = {\n  val c = consumer\n  paranoidPoll(c)\n  val parts = c.assignment().asScala\n\n  // \u5224\u65ad\u662f\u5426\u6709\u65b0\u5206\u533a\n  val newPartitions = parts.diff(currentOffsets.keySet)\n\n  // ...\n\n  // \u6dfb\u52a0\u65b0\u5206\u533a\u7684\u4f4d\u79fb\u533a\u95f4\u5230\u5f53\u524d\u7684\u4f4d\u79fb\u533a\u95f4\n  currentOffsets = currentOffsets ++ newPartitions.map(tp => tp -> c.position(tp)).toMap\n\n  c.seekToEnd(currentOffsets.keySet.asJava)\n  parts.map(tp => tp -> c.position(tp)).toMap\n}\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"\u65b0\u5206\u533a\u7684\u4f4d\u79fb\u533a\u95f4\u8d77\u59cb\u70b9\u7531 Driver \u7aef\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"auto.offset.reset")," \u51b3\u5b9a\u3002")),(0,r.kt)("h2",{id:"\u9884\u53d6\u673a\u5236"},"\u9884\u53d6\u673a\u5236"),(0,r.kt)("p",null,"\u987e\u540d\u601d\u4e49\uff0c\u9884\u53d6\u673a\u5236\u5c31\u662f\u9884\u5148\u6d88\u8d39\u6570\u636e\u7684\u673a\u5236\uff0c\u5b83\u53ef\u4ee5\u5728\u4e0b\u4e00\u4e2a RDD \u5c1a\u672a\u521b\u5efa\u524d\u4fbf\u9884\u5148\u62c9\u53d6\u5c5e\u4e8e\u4e0b\u4e00\u4e2a\u6279\u6b21\u7684\u6570\u636e\uff0c\u5c3d\u53ef\u80fd\u51cf\u5c11\u5fae\u6279\u7279\u6027\u5e26\u6765\u7684\u65f6\u95f4\u635f\u8017\u3002"),(0,r.kt)("h3",{id:"\u6d88\u8d39\u7f13\u5b58"},"\u6d88\u8d39\u7f13\u5b58"),(0,r.kt)("p",null,"\u6d88\u8d39\u7f13\u5b58\u662f\u9884\u53d6\u673a\u5236\u7684\u5b9e\u73b0\u57fa\u7840\uff0c\u5b83\u5305\u542b\u6d88\u8d39\u8005\u7f13\u5b58\u548c\u6570\u636e\u7f13\u5b58\u3002"),(0,r.kt)("p",null,"KafkaRDDIterator \u5728\u521b\u5efa Executor \u7aef\u6d88\u8d39\u8005\u540e\uff0c\u4f1a\u5c06\u6d88\u8d39\u8005\u653e\u5165\u5230 Executor \u7aef\u7684\u4e00\u4e2a LinkedHashMap \u4e2d\uff0c\u5176\u4e2d key \u7684\u7c7b\u578b\u4e3a CacheKey\uff08\u7531 groupId\u3001topic\u3001partition \u5171\u540c\u7ec4\u6210\uff09\uff0cvalue \u7684\u7c7b\u578b\u4e3a InternalKafkaConsumer\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(5560).Z,width:"662",height:"354"})),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"\u6d88\u8d39\u8005\u7f13\u5b58\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e\u9879 ",(0,r.kt)("inlineCode",{parentName:"p"},"spark.streaming.kafka.consumer.cache.enabled")," \u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u5f00\u542f\u3002")),(0,r.kt)("p",null,"\u6570\u636e\u7f13\u5b58\u5b9e\u9645\u4e0a\u662f\u53d1\u751f\u5728\u6570\u636e\u6d88\u8d39\u73af\u8282\u3002\u5f53 KafkaRDDIterator \u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"next")," \u88ab\u89e6\u53d1\u65f6\uff0c\u4f1a\u8c03\u7528\u539f\u751f KafkaConsumer \u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"poll")," \u65b9\u6cd5\u62c9\u53d6\u6570\u636e\uff0c\u7136\u540e\u653e\u5165\u5230 Executor \u7aef\u7684\u7f13\u5b58\u961f\u5217 ",(0,r.kt)("inlineCode",{parentName:"p"},"buffer")," \u4e2d\u3002\u7531\u4e8e ",(0,r.kt)("inlineCode",{parentName:"p"},"poll")," \u662f\u6279\u91cf\u62c9\u53d6\u7684\uff0c\u5373\u4fbf\u6d88\u8d39\u4f4d\u79fb\u5df2\u8fbe\u4f4d\u79fb\u533a\u95f4\u7ed3\u675f\u70b9\uff0c\u8fd8\u662f\u4f1a\u6709\u591a\u4f59\u7684\u6570\u636e\u5b58\u50a8\u5728 ",(0,r.kt)("inlineCode",{parentName:"p"},"buffer")," \u4e2d\u3002"),(0,r.kt)("p",null,"\u73b0\u5728\u8ba9\u6211\u4eec\u4ee5\u4e00\u4e2a\u4f8b\u5b50\u68b3\u7406\u6574\u4e2a\u6d88\u8d39\u7f13\u5b58\u7684\u8fc7\u7a0b\u3002\u5047\u8bbe\u6211\u4eec\u7684 KafkaRDD \u6709 3 \u4e2a\u5206\u533a\uff0cExecutor \u6570\u4e5f\u8bbe\u7f6e\u4e3a 3\uff0c\u90a3\u4e48\u901a\u8fc7\u6d88\u8d39\u8005\u7f13\u5b58\u673a\u5236\u6211\u4eec\u4f1a\u5728 3 \u4e2a Executor \u4e0a\u5206\u522b\u7559\u4e0b\u6d88\u8d39\u8005\u5b9e\u4f8b\uff0c\u5f53\u4e0b\u4e2a\u6279\u6b21\u7684\u8ba1\u7b97\u4efb\u52a1\u6267\u884c\u65f6\uff0c\u4fbf\u53ef\u4ee5\u590d\u7528\u4e4b\u524d\u7559\u4e0b\u7684\u6d88\u8d39\u8005\u5b9e\u4f8b\u548c\u6570\u636e\u7f13\u5b58\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(2214).Z,width:"940",height:"444"})),(0,r.kt)("p",null,"\u4f46\u662f\uff0c\u4ed4\u7ec6\u601d\u8003\u7684\u8bdd\uff0c\u6211\u4eec\u53c8\u9762\u4e34\u4e00\u4e2a\u65b0\u7684\u95ee\u9898\uff0c\u90a3\u5c31\u662f\u6bcf\u4e2a RDD \u5206\u533a\u5982\u4f55\u627e\u5230\u5bf9\u5e94\u7684 Executor\uff1f\u7b54\u6848\u662f\uff0c\u8c03\u5ea6\u504f\u597d\u3002"),(0,r.kt)("h3",{id:"\u8c03\u5ea6\u504f\u597d"},"\u8c03\u5ea6\u504f\u597d"),(0,r.kt)("p",null,"\u5728\u5b66\u4e60 Spark Core \u65f6\uff0c\u6211\u4eec\u77e5\u9053 RDD \u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"getPreferredLocations")," \u65b9\u6cd5\u7528\u4e8e\u6307\u5b9a\u8c03\u5ea6\u504f\u597d\uff0c\u901a\u8fc7\u8c03\u5ea6\u504f\u597d Spark \u5f15\u64ce\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5c06\u8ba1\u7b97\u4efb\u52a1\u201c\u79fb\u52a8\u201c\u5230\u6570\u636e\u6240\u5728\u7684\u8282\u70b9\u3002"),(0,r.kt)("p",null,"\u6211\u4eec\u53ef\u4ee5\u5728\u521b\u5efa DirectKafkaInputDStream \u65f6\u6307\u5b9a\u8c03\u5ea6\u504f\u597d\uff0c\u5982\u4ee3\u7801\u793a\u4f8b\u4e2d\u4f7f\u7528\u7684\u4fbf\u662f PreferConsistent \u7b56\u7565\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val stream: InputDStream[ConsumerRecord[String, String]] =\n  KafkaUtils.createDirectStream(ssc, PreferConsistent, Subscribe[String, String](topics, map.asScala))\n")),(0,r.kt)("p",null,"KafkaRDD \u652f\u6301\u7684\u8c03\u5ea6\u504f\u597d\u7b56\u7565\u6709 3 \u79cd\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"PreferBrokers\uff1a\u53ea\u6709 Executor \u548c Kafka Broker \u5728\u76f8\u540c\u8282\u70b9\u65f6\u53ef\u4ee5\u4f7f\u7528"),(0,r.kt)("li",{parentName:"ul"},"PreferConsistent\uff1a\u6700\u5e38\u89c1\u7684\u7b56\u7565\uff0c\u53ef\u4ee5\u5c06\u5206\u533a\u5206\u53d1\u5230\u6240\u6709 Executor"),(0,r.kt)("li",{parentName:"ul"},"PreferFixed\uff1a\u901a\u8fc7\u914d\u7f6e\u5c06 TopicPartition \u5206\u914d\u5230\u56fa\u5b9a\u7684\u4e3b\u673a\uff0c\u82e5\u6709\u90e8\u5206 TopicPartition \u672a\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\uff0c\u5219\u9ed8\u8ba4\u4f7f\u7528 PreferConsistent \u7b56\u7565")),(0,r.kt)("p",null,"\u5176\u4e2d\u7684 PreferConsistent \u7b56\u7565\u662f ",(0,r.kt)("strong",{parentName:"p"},"\u5b9e\u73b0\u5c06\u6bcf\u4e2a\u5206\u533a\u6301\u7eed\u5730\u8c03\u5ea6\u5230\u540c\u4e00\u4e2a Executor")," \u7684\u5173\u952e\u3002\u57fa\u4e8e\u8fd9\u4e2a\u7b56\u7565\uff0cKafkaRDD \u8ba1\u7b97\u7684\u5206\u533a\u504f\u597d\u4f4d\u7f6e\u4e3a ",(0,r.kt)("strong",{parentName:"p"},"\u5206\u533a\u53f7\u4e0e Executor \u6570")," \u7684\u53d6\u4f59\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u5206\u533a\u90fd\u5c3d\u53ef\u80fd\u5730\u8c03\u5ea6\u5230\u540c\u4e00\u4e2a Executor \u4e0a\u3002\u5177\u4f53\u7684\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"override def getPreferredLocations(thePart: Partition): Seq[String] = {\n  val part = thePart.asInstanceOf[KafkaRDDPartition]\n  val allExecs = executors()\n  val tp = part.topicPartition\n  val prefHost = preferredHosts.get(tp)\n  val prefExecs = if (null == prefHost) allExecs else allExecs.filter(_.host == prefHost)\n  val execs = if (prefExecs.isEmpty) allExecs else prefExecs\n  if (execs.isEmpty) {\n    Seq.empty\n  } else {\n    // execs is sorted, tp.hashCode depends only on topic and partition, so consistent index\n    val index = Math.floorMod(tp.hashCode, execs.length)\n    val chosen = execs(index)\n    Seq(chosen.toString)\n  }\n}\n")),(0,r.kt)("h2",{id:"\u4f4d\u79fb\u5b58\u50a8"},"\u4f4d\u79fb\u5b58\u50a8"),(0,r.kt)("p",null,"\u4f4d\u79fb\u5b58\u50a8\u662f\u672c\u6587\u6700\u540e\u4e00\u90e8\u5206\u5185\u5bb9\uff0c\u5b83\u4e5f\u662f Spark Streaming \u96c6\u6210 Kafka \u4e2d\u975e\u5e38\u91cd\u8981\u7684\u90e8\u5206\uff0c\u5176\u5b58\u50a8\u65b9\u5f0f\u5c06\u5f71\u54cd\u6d88\u606f\u4f20\u8f93\u4fdd\u969c\u7ea7\u522b\u662f At Least Once \u8fd8\u662f Exactly Once\u3002"),(0,r.kt)("h3",{id:"kafka"},"Kafka"),(0,r.kt)("p",null,"Kafka Consumer API \u81ea\u5e26\u4f4d\u79fb\u63d0\u4ea4\u529f\u80fd\uff0c\u53ef\u5c06\u4f4d\u79fb\u4fe1\u606f\u4fdd\u5b58\u5230\u7279\u6b8a\u7684 topic\uff08\u5373 ",(0,r.kt)("inlineCode",{parentName:"p"},"__consumer_offsets"),"\uff09\u4e2d\u3002\u8be5\u529f\u80fd\u6709\u4e24\u79cd\u4f7f\u7528\u65b9\u5f0f\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u8bbe\u7f6e ",(0,r.kt)("inlineCode",{parentName:"li"},"enable.auto.commit")," \u4e3a ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),"\uff0c\u6d88\u8d39\u8005\u4f1a\u5468\u671f\u6027\u81ea\u52a8\u63d0\u4ea4\u6d88\u8d39\u4f4d\u79fb"),(0,r.kt)("li",{parentName:"ul"},"\u8bbe\u7f6e ",(0,r.kt)("inlineCode",{parentName:"li"},"enable.auto.commit")," \u4e3a ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),"\uff0c\u4e3b\u52a8\u8c03\u7528 ",(0,r.kt)("inlineCode",{parentName:"li"},"commit")," \u65b9\u6cd5\u63d0\u4ea4\u6d88\u8d39\u4f4d\u79fb")),(0,r.kt)("p",null,"\u901a\u5e38\u6765\u8bf4\uff0c\u81ea\u52a8\u63d0\u4ea4\u6d88\u8d39\u4f4d\u79fb\u4e0d\u662f\u53ef\u9760\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u6211\u4eec\u65e0\u6cd5\u51c6\u786e\u9884\u4f30\u5b83\u4f55\u65f6\u88ab\u89e6\u53d1\u3002\u5982\u679c\u63d0\u4ea4\u884c\u4e3a\u53d1\u751f\u5728\u6570\u636e\u5904\u7406\u524d\uff0c\u5f53\u6570\u636e\u5904\u7406\u51fa\u73b0\u5f02\u5e38\u65f6\uff0c\u7531\u4e8e\u6d88\u8d39\u8fdb\u5ea6\u5df2\u786e\u8ba4\u4f46\u5e76\u672a\u8ba1\u7b97\u51fa\u7ed3\u679c\uff0c\u4f1a\u51fa\u73b0\u6570\u636e\u4e22\u5931\u7684\u60c5\u51b5\uff1b\u5982\u679c\u63d0\u4ea4\u884c\u4e3a\u53d1\u751f\u5728\u6570\u636e\u5904\u7406\u540e\uff0c\u5f53\u4f4d\u79fb\u63d0\u4ea4\u5931\u8d25\u65f6\uff0c\u7531\u4e8e\u5df2\u8ba1\u7b97\u51fa\u7ed3\u679c\u4f46\u6d88\u8d39\u8fdb\u5ea6\u88ab\u91cd\u7f6e\uff0c\u4f1a\u51fa\u73b0\u91cd\u590d\u8ba1\u7b97\u7684\u73b0\u8c61\u3002"),(0,r.kt)("p",null,"\u76f8\u5bf9\u4e8e\u81ea\u52a8\u63d0\u4ea4\uff0c\u624b\u52a8\u63d0\u4ea4\u6d88\u8d39\u4f4d\u79fb\u663e\u5f97\u66f4\u52a0\u53ef\u63a7\uff0c\u56e0\u6b64\u6210\u4e3a\u66f4\u53d7\u6b22\u8fce\u7684\u9009\u62e9\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u5728\u6570\u636e\u5904\u7406\u6210\u529f\u540e\u624b\u52a8\u63d0\u4ea4\u6d88\u8d39\u4f4d\u79fb\uff0c\u5176\u4ee3\u7801\u793a\u4f8b\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"stream.foreachRDD { rdd =>\n  val currentOffsets: Array[OffsetRange] = rdd.asInstanceOf[HasOffsetRanges].offsetRanges\n  // \u6570\u636e\u5199\u51fa\u540e\uff0c\u63d0\u4ea4\u6d88\u8d39\u4f4d\u79fb\n  stream.asInstanceOf[CanCommitOffsets].commitAsync(currentOffsets)\n}\n")),(0,r.kt)("p",null,"\u53ef\u4ee5\u770b\u51fa\uff0c\u901a\u8fc7 Kafka Consumer API \u63d0\u4ea4\u6d88\u8d39\u4f4d\u79fb\uff0c\u5728\u7f16\u7801\u4e0a\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u4f46\u7531\u4e8e Kafka Consumer API \u7684\u4f4d\u79fb\u63d0\u4ea4\u4e0d\u652f\u6301\u4e8b\u52a1\uff0c\u9664\u975e\u4e0b\u6e38\u8f93\u51fa\u7ec4\u4ef6\u652f\u6301\u5e42\u7b49\u6027\uff0c\u5426\u5219\u8fd9\u79cd\u4f4d\u79fb\u5b58\u50a8\u65b9\u5f0f\u53ea\u80fd\u4fdd\u8bc1 At Least Once \u8bed\u4e49\u3002"),(0,r.kt)("h3",{id:"checkpoint"},"Checkpoint"),(0,r.kt)("p",null,"\u5982\u679c\u542f\u7528\u4e86 checkpoint \u529f\u80fd\uff0c\u90a3\u4e48\u4f4d\u79fb\u4fe1\u606f\u4f1a\u968f\u7740 RDD \u81ea\u52a8\u4fdd\u5b58\u5230 checkpoint \u6587\u4ef6\u4e2d\u3002\u8fd9\u79cd\u65b9\u5f0f\u4e0d\u9700\u8981\u6211\u4eec\u624b\u52a8\u63d0\u4ea4\u4f4d\u79fb\uff0c\u53ea\u9700\u5f00\u542f checkpoint\uff0c\u5e76\u8bbe\u5b9a\u91cd\u542f\u65f6\u4ece checkpoint \u6062\u590d\u4f5c\u4e1a\u73b0\u573a\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'object KafkaCheckpointStream {\n\n  def main(args: Array[String]): Unit = {\n\n    val checkpointDir: String = "./checkpoint"\n\n    def functionToCreateContext(): StreamingContext = {\n      val conf: SparkConf = new SparkConf().setMaster("local[3]").setAppName("Kafka Checkpoint Streaming App")\n      val ssc: StreamingContext = new StreamingContext(conf, Seconds(10))\n      ssc.checkpoint(checkpointDir)\n\n      val map: util.HashMap[String, Object] = new util.HashMap[String, Object]()\n      // \u7701\u7565 kafka consumer \u914d\u7f6e\n\n      val topics: Array[String] = Array("test")\n      val stream: InputDStream[ConsumerRecord[String, String]] =\n        KafkaUtils.createDirectStream(ssc, PreferConsistent, Subscribe[String, String](topics, map.asScala))\n\n      stream.foreachRDD((rdd, time) => {\n        rdd.foreachPartition(iterator => {\n          while (iterator.hasNext) {\n            val value: String = iterator.next().value()\n            println(value)\n          }\n        })\n      })\n      ssc\n    }\n\n    val ssc: StreamingContext = StreamingContext.getOrCreate(checkpointDir, functionToCreateContext _)\n\n    ssc.start()\n    ssc.awaitTermination()\n  }\n}\n')),(0,r.kt)("p",null,"\u57fa\u4e8e checkpoint \u7684\u4f4d\u79fb\u63d0\u4ea4\u5728\u7f16\u7801\u4e0a\u4e5f\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u4f46\u662f\u5b83\u5b58\u5728\u4e24\u4e2a\u7f3a\u9677\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u9664\u975e\u4e0b\u6e38\u8f93\u51fa\u7ec4\u4ef6\u652f\u6301\u5e42\u7b49\u6027\uff0c\u5426\u5219\u53ea\u80fd\u4fdd\u8bc1 At Least Once \u8bed\u4e49"),(0,r.kt)("li",{parentName:"ul"},"\u4e00\u65e6\u8ba1\u7b97\u4f5c\u4e1a\u6709\u4ee3\u7801\u66f4\u65b0\uff0c\u539f\u6709\u7684 checkpoint \u6587\u4ef6\u5c06\u4e0d\u53ef\u7528")),(0,r.kt)("p",null,"\u53ef\u89c1\uff0c\u57fa\u4e8e checkpoint \u4fdd\u5b58\u4f4d\u79fb\u65e2\u4e0d\u7075\u6d3b\uff0c\u98ce\u9669\u7cfb\u6570\u53c8\u9ad8\uff0c\u56e0\u6b64\u8fd9\u79cd\u65b9\u5f0f\u4e0d\u5efa\u8bae\u4f7f\u7528\u3002"),(0,r.kt)("h3",{id:"\u6570\u636e\u5e93"},"\u6570\u636e\u5e93"),(0,r.kt)("p",null,"\u5c06\u6d88\u8d39\u4f4d\u79fb\u5b58\u50a8\u5728 Kafka \u6216\u8005 checkpoint \u6587\u4ef6\uff0c\u6211\u4eec\u83b7\u5f97\u4e86\u7f16\u7801\u4e0a\u7684\u4fbf\u5229\u6027\uff0c\u4f46\u5931\u53bb\u4e86\u5bf9\u6d88\u8d39\u4f4d\u79fb\u7684\u7ba1\u7406\u6743\u3002\u6211\u4eec\u65e0\u6cd5\u81ea\u7531\u5730\u53bb\u4fee\u6539\u5b83\uff0c\u81ea\u7136\u5c31\u65e0\u6cd5\u81ea\u7531\u5730\u8c03\u6574\u6d41\u5f0f\u4f5c\u4e1a\u7684\u6d88\u8d39\u8fdb\u5ea6\uff0c\u8fd9\u5728\u5f88\u591a\u4e1a\u52a1\u573a\u666f\u4e2d\u4f1a\u7ed9\u6211\u4eec\u5e26\u6765\u684e\u688f\u3002"),(0,r.kt)("p",null,"\u4e3a\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5c06\u4f4d\u79fb\u4fe1\u606f\u5b58\u50a8\u5230\u6570\u636e\u5e93\uff0c\u4f46\u8fd9\u79cd\u65b9\u5f0f\u5728\u7f16\u7801\u4e0a\u4f1a\u590d\u6742\u8bb8\u591a\uff0c\u5982\u4e0b\u6240\u793a\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'// \u4ece\u6570\u636e\u5e93\u8bfb\u53d6\u6d88\u8d39\u4f4d\u79fb\nval fromOffsets = selectOffsetsFromYourDatabase.map { resultSet =>\n  new TopicPartition(resultSet.string("topic"), resultSet.int("partition")) -> resultSet.long("offset")\n}.toMap\n\nval stream = KafkaUtils.createDirectStream[String, String](\n  streamingContext,\n  PreferConsistent,\n  Assign[String, String](fromOffsets.keys.toList, kafkaParams, fromOffsets)\n)\n\nstream.foreachRDD { rdd =>\n  val offsetRanges = rdd.asInstanceOf[HasOffsetRanges].offsetRanges\n  // \u6570\u636e\u5199\u51fa\n  // \u63d0\u4ea4\u6d88\u8d39\u4f4d\u79fb\u5230\u6570\u636e\u5e93\n}\n')),(0,r.kt)("p",null,"\u57fa\u4e8e\u6570\u636e\u5e93\u5b58\u50a8\u6d88\u8d39\u4f4d\u79fb\u540c\u6837\u53ef\u4ee5\u4fdd\u8bc1 At Least Once \u8bed\u4e49\u3002\u6709\u610f\u601d\u7684\u662f\uff0c\u5982\u679c\u4e0b\u6e38\u8f93\u51fa\u7ec4\u4ef6\u662f\u540c\u6837\u7684\u6570\u636e\u5e93\uff0c\u4e14\u5b83\u652f\u6301\u4e8b\u52a1\uff0c\u90a3\u4e48\u6211\u4eec\u4fbf\u53ef\u4ee5\u5728\u540c\u4e00\u4e2a\u4e8b\u52a1\u4e2d\u5b8c\u6210\u6570\u636e\u5199\u51fa\u548c\u4f4d\u79fb\u63d0\u4ea4\uff0c\u8fd9\u5c31\u5b9e\u73b0\u4e86 Exactly Once \u8bed\u4e49\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"stream.foreachRDD { rdd =>\n  val offsetRanges = rdd.asInstanceOf[HasOffsetRanges].offsetRanges\n\n  val results = yourCalculation(rdd)\n\n  // begin your transaction\n\n  // update results\n  // update offsets where the end of existing offsets matches the beginning of this batch of offsets\n  // assert that offsets were updated correctly\n\n  // end your transaction\n}\n")),(0,r.kt)("p",null,"\u5c3d\u7ba1\u901a\u8fc7\u6570\u636e\u5e93\u5b58\u50a8\u4f4d\u79fb\u4f1a\u5e26\u6765\u66f4\u9ad8\u7684\u7f16\u7801\u590d\u6742\u5ea6\uff0c\u4f46\u5176\u63d0\u4f9b\u7684\u81ea\u7531\u7ba1\u7406\u4f4d\u79fb\u7684\u80fd\u529b\u4ee5\u53ca\u5c11\u6570\u652f\u6301 Exactly Once \u7684\u573a\u666f\uff0c\u90fd\u8db3\u4ee5\u8ba9\u6211\u4eec\u5c06\u5176\u5f53\u4f5c ",(0,r.kt)("strong",{parentName:"p"},"\u6700\u4f18\u7684\u4f4d\u79fb\u5b58\u50a8\u65b9\u6848"),"\u3002"))}k.isMDXComponent=!0},5560:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/cache_consumer-52f0655a93336dbbd984260fb58abb1d.svg"},3437:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/consumer_assign-862e8be37788c3f89512be94953359d0.svg"},2214:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/consumer_reuse-d7cea59620a6e9c3b30a4f5d9382cab6.svg"},5667:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/offsets_assign-7bc78be5e2b17f0da10636bdd3dd1dea.svg"}}]);