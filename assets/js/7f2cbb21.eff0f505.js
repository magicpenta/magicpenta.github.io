"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2477],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=i,g=m["".concat(l,".").concat(d)]||m[d]||p[d]||a;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7581:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:4},o="Flume ElasticSearch Sink\uff08\u5f02\u6b65\uff09",s={unversionedId:"flume/Flume ElasticSearch Sink",id:"flume/Flume ElasticSearch Sink",title:"Flume ElasticSearch Sink\uff08\u5f02\u6b65\uff09",description:"\u9700\u6c42\u80cc\u666f",source:"@site/docs/flume/Flume ElasticSearch Sink.md",sourceDirName:"flume",slug:"/flume/Flume ElasticSearch Sink",permalink:"/docs/flume/Flume ElasticSearch Sink",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"Flume \u8d1f\u8f7d\u5747\u8861\u9009\u62e9\u5668",permalink:"/docs/flume/Flume \u8d1f\u8f7d\u5747\u8861\u9009\u62e9\u5668"},next:{title:"Flume \u81ea\u5b9a\u4e49\u76d1\u63a7",permalink:"/docs/flume/Flume \u81ea\u5b9a\u4e49\u76d1\u63a7"}},l={},c=[{value:"\u9700\u6c42\u80cc\u666f",id:"\u9700\u6c42\u80cc\u666f",level:2},{value:"\u4ee3\u7801\u5b9e\u73b0",id:"\u4ee3\u7801\u5b9e\u73b0",level:2}],u={toc:c};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"flume-elasticsearch-sink\u5f02\u6b65"},"Flume ElasticSearch Sink\uff08\u5f02\u6b65\uff09"),(0,i.kt)("h2",{id:"\u9700\u6c42\u80cc\u666f"},"\u9700\u6c42\u80cc\u666f"),(0,i.kt)("p",null,"Flume \u81ea\u5e26 ElasticSearch Sink\uff0c\u652f\u6301\u5c06\u6570\u636e\u5199\u5230 ElasticSearch\u3002"),(0,i.kt)("p",null,"\u4f46\u662f\uff0c\u5b98\u65b9\u7684 ElasticSearch Sink \u4e0d\u652f\u6301\u5f02\u6b65\u53d1\u9001\uff0c\u5728\u9762\u5bf9 ",(0,i.kt)("strong",{parentName:"p"},"\u6570\u636e\u6fc0\u589e"),"\u3001",(0,i.kt)("strong",{parentName:"p"},"\u4e0b\u6e38\u7ec4\u4ef6\u5f02\u5e38")," \u7b49\u60c5\u51b5\u65f6\uff0c\u5bb9\u6613\u51fa\u73b0\u96a7\u9053\u5806\u79ef\uff0c\u8fdb\u800c\u5bfc\u81f4 Flume \u96c6\u7fa4\u5f02\u5e38\u3002"),(0,i.kt)("p",null,"\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u652f\u6301\u5f02\u6b65\u7684 ElasticSearch Sink\uff0c\u4ee5\u89c4\u907f\u4e0a\u8ff0\u95ee\u9898\u3002"),(0,i.kt)("h2",{id:"\u4ee3\u7801\u5b9e\u73b0"},"\u4ee3\u7801\u5b9e\u73b0"),(0,i.kt)("p",null,"\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u6dfb\u52a0 ElasticSearch \u9ad8\u53ef\u7528\u5ba2\u6237\u7aef\u7684\u4f9d\u8d56\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>org.elasticsearch.client</groupId>\n    <artifactId>elasticsearch-rest-high-level-client</artifactId>\n    <version>7.8.0</version>\n</dependency>\n")),(0,i.kt)("p",null,"\u7136\u540e\uff0c\u5b9a\u4e49\u81ea\u5b9a\u4e49 ElasticSearch Sink \u6240\u9700\u8981\u7684\u914d\u7f6e\u53c2\u6570\uff1a"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"\u914d\u7f6e\u9879"),(0,i.kt)("th",{parentName:"tr",align:null},"\u9ed8\u8ba4\u503c"),(0,i.kt)("th",{parentName:"tr",align:null},"\u914d\u7f6e\u8bf4\u660e"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"hosts"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"ElasticSearch \u96c6\u7fa4\u5730\u5740")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"username"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"ElasticSearch \u7528\u6237\u540d\uff087.x \u7248\u672c\u4ee5\u4e0a\u652f\u6301\uff09")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"password"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"ElasticSearch \u5bc6\u7801\uff087.x \u7248\u672c\u4ee5\u4e0a\u652f\u6301\uff09")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"restPort"),(0,i.kt)("td",{parentName:"tr",align:null},"9200"),(0,i.kt)("td",{parentName:"tr",align:null},"ElasticSearch \u96c6\u7fa4\u7aef\u53e3")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"indexHeader"),(0,i.kt)("td",{parentName:"tr",align:null},"topic"),(0,i.kt)("td",{parentName:"tr",align:null},"\u7528\u4e8e\u83b7\u53d6\u7d22\u5f15\u540d\u79f0\u7684 header")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"batchSize"),(0,i.kt)("td",{parentName:"tr",align:null},"1000"),(0,i.kt)("td",{parentName:"tr",align:null},"\u5355\u6279\u6b21\u5199\u5165 ElasticSearch \u7684\u4e8b\u4ef6\u6570")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"indexTimeZone"),(0,i.kt)("td",{parentName:"tr",align:null},"Asia/Shanghai"),(0,i.kt)("td",{parentName:"tr",align:null},"\u7d22\u5f15\u65f6\u95f4\u5206\u533a\u5bf9\u5e94\u7684\u65f6\u533a")))),(0,i.kt)("p",null,"\u6700\u540e\uff0c\u57fa\u4e8e Bulk API \u5b9e\u73b0\u652f\u6301\u5f02\u6b65\u7684 ElasticSearch Sink\uff0c\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'package com.panda.flume.sink.elasticsearch;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport com.dianchu.flume.util.DateFormatUtils;\nimport com.google.common.base.Preconditions;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Date;\nimport java.util.TimeZone;\nimport java.util.function.BiConsumer;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.flume.Channel;\nimport org.apache.flume.Context;\nimport org.apache.flume.Event;\nimport org.apache.flume.Sink;\nimport org.apache.flume.Transaction;\nimport org.apache.flume.conf.Configurable;\nimport org.apache.flume.instrumentation.SinkCounter;\nimport org.apache.flume.sink.AbstractSink;\nimport org.apache.http.HttpHost;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.CredentialsProvider;\nimport org.apache.http.impl.client.BasicCredentialsProvider;\nimport org.elasticsearch.action.ActionListener;\nimport org.elasticsearch.action.bulk.BackoffPolicy;\nimport org.elasticsearch.action.bulk.BulkProcessor;\nimport org.elasticsearch.action.bulk.BulkRequest;\nimport org.elasticsearch.action.bulk.BulkResponse;\nimport org.elasticsearch.action.index.IndexRequest;\nimport org.elasticsearch.client.RequestOptions;\nimport org.elasticsearch.client.RestClient;\nimport org.elasticsearch.client.RestClientBuilder;\nimport org.elasticsearch.client.RestHighLevelClient;\nimport org.elasticsearch.common.unit.ByteSizeUnit;\nimport org.elasticsearch.common.unit.ByteSizeValue;\nimport org.elasticsearch.common.unit.TimeValue;\nimport org.elasticsearch.common.xcontent.XContentType;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * \u5f02\u6b65 es sink\n *\n * @author panda\n * @date 2021/7/8\n */\npublic class ElasticSearchSink extends AbstractSink implements Configurable {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ElasticSearchSink.class);\n\n    private static final String DEFAULT_INDEX_NAME = "default_flume_index";\n\n    private String[] hosts;\n\n    private String indexHeader;\n\n    private String indexTimeZone;\n\n    private String username;\n\n    private String password;\n\n    private Integer port;\n\n    private Integer batchSize;\n\n    private RestHighLevelClient client;\n\n    private BulkProcessor bulkProcessor;\n\n    private SinkCounter sinkCounter;\n\n    @Override\n    public void configure(Context context) {\n        String esHostString = StringUtils.deleteWhitespace(context.getString("hosts"));\n        this.hosts = esHostString.split(",");\n        this.username = context.getString("username", "flume");\n        this.password = context.getString("password", "flume");\n        this.port = context.getInteger("restPort", 9200);\n        this.batchSize = context.getInteger("batchSize", 1000);\n        this.indexHeader = context.getString("indexHeader", "topic");\n        this.indexTimeZone = context.getString("indexTimeZone", "Asia/Shanghai");\n\n        Preconditions.checkState(StringUtils.isNotEmpty(esHostString), "the config of hosts is empty.");\n        Preconditions.checkState(batchSize >= 1, "batch size must be greater than 0.");\n\n        if (sinkCounter == null) {\n            sinkCounter = new SinkCounter(getName());\n        }\n    }\n\n    @Override\n    public synchronized void start() {\n        LOGGER.info("Starting ElasticSearch Sink...");\n        sinkCounter.start();\n        try {\n            // \u914d\u7f6e\u65e5\u5fd7\u8f93\u51fa\u8def\u5f84\n            HttpHost[] httpHosts = new HttpHost[this.hosts.length];\n            for (int i = 0; i < this.hosts.length; i++) {\n                httpHosts[i] = new HttpHost(this.hosts[i], this.port, "http");\n            }\n            RestClientBuilder builder = RestClient.builder(httpHosts);\n            if (StringUtils.isNotEmpty(username) && StringUtils.isNotEmpty(password)) {\n                CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n                credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));\n                builder.setHttpClientConfigCallback(f -> f.setDefaultCredentialsProvider(credentialsProvider));\n            }\n            this.client = new RestHighLevelClient(builder);\n\n            BulkProcessor.Listener listener = new BulkProcessor.Listener() {\n                @Override\n                public void beforeBulk(long executionId, BulkRequest request) {\n                    LOGGER.info("Executing bulk {} with {} requests", executionId, request.numberOfActions());\n                }\n\n                @Override\n                public void afterBulk(long executionId, BulkRequest request, BulkResponse response) {\n                    if (response.hasFailures()) {\n                        LOGGER.error(response.buildFailureMessage());\n                    }\n                    LOGGER.info("Bulk execution completed [{}]\\n" +\n                            "Took (ms): {}\\n" +\n                            "Count: {}", executionId, response.getTook().getMillis(), response.getItems().length);\n                }\n\n                @Override\n                public void afterBulk(long executionId, BulkRequest request, Throwable failure) {\n                    LOGGER.error("Failed to execute bulk: {}", failure.getMessage());\n                }\n            };\n\n            BiConsumer<BulkRequest, ActionListener<BulkResponse>> bulkConsumer =\n                    (request, bulkListener) -> client.bulkAsync(request, RequestOptions.DEFAULT, bulkListener);\n            // \u5728\u8fd9\u91cc\u8c03\u7528 build() \u65b9\u6cd5\u6784\u9020 bulkProcessor\uff0c\u5728\u5e95\u5c42\u5b9e\u9645\u4e0a\u662f\u7528\u4e86 bulk \u7684\u5f02\u6b65\u64cd\u4f5c\n            this.bulkProcessor = BulkProcessor.builder(bulkConsumer, listener)\n                    // 1000 \u6761\u6570\u636e\u8bf7\u6c42\u6267\u884c\u4e00\u6b21 bulk\n                    .setBulkActions(this.batchSize)\n                    // 20mb \u7684\u6570\u636e\u5237\u65b0\u4e00\u6b21 bulk\n                    .setBulkSize(new ByteSizeValue(20L, ByteSizeUnit.MB))\n                    // \u5e76\u53d1\u8bf7\u6c42\u6570\u91cf, 0 \u4e0d\u5e76\u53d1, 1 \u5e76\u53d1\u5141\u8bb8\u6267\u884c\n                    .setConcurrentRequests(1)\n                    // \u56fa\u5b9a 10s \u5fc5\u987b\u5237\u65b0\u4e00\u6b21\n                    .setFlushInterval(TimeValue.timeValueSeconds(10L))\n                    // \u91cd\u8bd5 5 \u6b21\uff0c\u95f4\u9694 1 s\n                    .setBackoffPolicy(BackoffPolicy.constantBackoff(TimeValue.timeValueSeconds(1L), 5))\n                    .build();\n            sinkCounter.incrementConnectionCreatedCount();\n        } catch (Exception e) {\n            LOGGER.error(e.getMessage());\n            sinkCounter.incrementConnectionFailedCount();\n        }\n        super.start();\n    }\n\n    @Override\n    public synchronized void stop() {\n        try {\n            LOGGER.info("Stopping ElasticSearch Sink...");\n            this.bulkProcessor.close();\n            this.client.close();\n            sinkCounter.incrementConnectionClosedCount();\n            sinkCounter.stop();\n        } catch (Exception e) {\n            LOGGER.error(e.getMessage());\n        }\n        super.stop();\n    }\n\n    @Override\n    public Sink.Status process() {\n        Status status = Status.READY;\n        Channel ch = getChannel();\n        Transaction txn = ch.getTransaction();\n        try {\n            txn.begin();\n\n            String dateString = DateFormatUtils\n                    .format(System.currentTimeMillis(), "yyyy.MM.dd", TimeZone.getTimeZone(indexTimeZone));\n\n            int count;\n            for (count = 0; count <= batchSize; ++count) {\n                Event event = ch.take();\n                if (event == null) {\n                    break;\n                }\n                // \u62fc\u63a5\u7d22\u5f15\n                String indexName = event.getHeaders().get(indexHeader);\n                if (StringUtils.isEmpty(indexName)) {\n                    indexName = DEFAULT_INDEX_NAME;\n                }\n                indexName += "-" + dateString;\n                // \u8ffd\u52a0\u65f6\u95f4\u4fe1\u606f\n                boolean isSuccess = this.appendTime(event);\n                // \u82e5\u6570\u636e\u7b26\u5408 JSON \u683c\u5f0f\uff0c\u6dfb\u52a0\u8bf7\u6c42\n                if (isSuccess) {\n                    this.bulkProcessor.add(new IndexRequest(indexName).source(event.getBody(), XContentType.JSON));\n                }\n            }\n\n            if (count <= 0) {\n                sinkCounter.incrementBatchEmptyCount();\n                status = Status.BACKOFF;\n            } else {\n                if (count < batchSize) {\n                    sinkCounter.incrementBatchUnderflowCount();\n                } else {\n                    sinkCounter.incrementBatchCompleteCount();\n                }\n                sinkCounter.addToEventDrainAttemptCount(count);\n            }\n\n            txn.commit();\n            sinkCounter.addToEventDrainSuccessCount(count);\n\n        } catch (Exception e) {\n            txn.rollback();\n            LOGGER.error(e.getMessage());\n            status = Status.BACKOFF;\n        } finally {\n            txn.close();\n        }\n        return status;\n    }\n\n    public boolean appendTime(Event event) {\n\n        boolean isSuccess = Boolean.TRUE;\n        String body = new String(event.getBody(), StandardCharsets.UTF_8);\n\n        try {\n            JSONObject jsonObject = JSON.parseObject(body);\n\n            // \u8ffd\u52a0\u4e8b\u4ef6\u751f\u6210\u65f6\u95f4 generated_time\n            if (!jsonObject.containsKey("generated_time")) {\n                String generatedTime = null;\n                String logTime = jsonObject.getString("log_time");\n\n                // \u5982\u679c log_time \u4e3a\u65f6\u95f4\u6233\u6216\u8005\u65f6\u95f4\u5b57\u7b26\u4e32\uff0c\u8f6c\u6362\u4e3a generated_time\n                if (StringUtils.isNotEmpty(logTime) && StringUtils.isNumeric(logTime) && logTime.length() == 10) {\n                    long timestamp = Long.parseLong(logTime + "000");\n                    generatedTime = DateFormatUtils.ES_SINK_DATETIME_FORMAT.format(timestamp);\n                } else if (StringUtils.isNotEmpty(logTime) && !StringUtils.isNumeric(logTime)) {\n                    Date date = DateFormatUtils.parse(DateFormatUtils.SIMPLE_DATETIME_FORMAT, logTime);\n                    generatedTime = DateFormatUtils.ES_SINK_DATETIME_FORMAT.format(date);\n                }\n\n                if (StringUtils.isEmpty(generatedTime)) {\n                    long timestamp = System.currentTimeMillis();\n                    generatedTime = DateFormatUtils.ES_SINK_DATETIME_FORMAT.format(timestamp);\n                }\n\n                jsonObject.put("generated_time", generatedTime);\n            }\n\n            // \u8ffd\u52a0\u5199\u51fa\u65f6\u95f4 write_time\n            String writeTime = DateFormatUtils.ES_SINK_DATETIME_FORMAT.format(System.currentTimeMillis());\n            jsonObject.put("write_time", writeTime);\n\n            event.setBody(jsonObject.toJSONString().getBytes(StandardCharsets.UTF_8));\n\n        } catch (Exception e) {\n            isSuccess = Boolean.FALSE;\n            LOGGER.error("append time error, header info: {}, body info: {}", event.getHeaders(), body);\n        }\n        return isSuccess;\n    }\n\n}\n')))}m.isMDXComponent=!0}}]);